
		AnswerType {YES_NO, YES_NO_NOOPINION, TEXT_FEILD, STAR_RATING}
		
		answerTypeClassMap = {
			AnswerType.YES_NO : AnswerYES_NO,
			AnswerType.YES_NO_NOOPINION : AnswerYES_NO_NOOPINION,
			AnswerType.TEXT_FEILD : AnswerTEXT_FEILD,
			AnswerType.STAR_RATING : AnswerSTAR_RATING
		}
		
		UserSnapshot(String id, String name, String organization, Bool isOnline):
			String id
			String name
			String organization
			Bool isOnline
			
			Map toJson()
			Map fromJson()
			
			
		User(String id, Database database):
			Database database
			Stream<UserSnapshot> allInfoStream
			Stream<String> name
			String organization
			String id
			Stream<Bool> isOnline
			
		PollSnapshot(String id, String question, AnswerType questionType, bool isAnonymous, int timestamp, String creatorId, List<Answer> Answers, bool areResultsVisible): 
			String id
			String question
			AnswerType answerType
			bool isAnonymous
			int timestamp
			String creatorId
			List<Answer> answers
			Bool areResultsVisible
			
		
		Poll(String id, Database database):
			Stream<PollSnapshot> allInfoStream
			String id
			String question
			AnswerType answerType
			bool isAnonymous
			int timestamp
			String creatorId
			Stream<List<Answer>> answers
			Stream<Bool> areResult 
			hsVisible
			Stream<Bool> isActive
				
			Stream<PollSummary> getSummaryStream(User user) // stream is hooked up to areResults visible stream, and will push new object if it changes
			Stream<bool> getAnswerOfUser(User user) // returns null if no answer 
			bool isCreator(User user)
			Future<void> setResultVisibility(bool visibility)

			
			
		//--------------------------------------------------------
			
		PollSummary(Poll poll, bool hasResultVisibilityPrivilege, int pendingCount):
			Poll parentPoll
			bool isAnonymous
			bool areResultsVisible
			bool hasResultVisibilityPrivilege
			int pendingCount;
			
			void setAnonymity(bool anonymity)
			void setVisibility(bool visibility)
			
		Answer(String respondantId, int timestamp, bool pending):
			bool pending
			String respondantId
			int timestamp
			
		//--------------------------------------------------------	Yes, No Poll
		
		AnswerEnumYES_NO {YES, NO}
		
		
		PollSummaryYES_NO extends PollSummary(Poll poll, bool hasResultVisibilityPrivilege, int yesCount, int noCount, int pendingCount);
			int yesCount
			int noCount
			
		
		AnswerYES_NO extends Answer(String respondantId, int timestamp, bool pending, AnswerEnumYES_NO answer,)
			AnswerEnumYES_NO answer
			static Stream<PollSummaryYES_NO> generateSummary(Stream<List<Answer>>); 
			
		//--------------------------------------------------------	Yes, No, No Opinion Poll
		
		AnswerEnumYES_NO_NOOPINION {YES, NO, NOOPINION}
		
		
		PollSummaryYES_NO_NOOPINION extends PollSummary(Poll poll, bool hasResultVisibilityPrivilege, int yesCount, int noCount, int noOpinionCount, int pendingCount);
			int yesCount
			int noCount
			int noOpinionCount
			
		
		AnswerYES_NO_NOOPINION extends Answer(String respondantId, int timestamp, bool pending, AnswerEnumYES_NO_NOOPINION answer,)
			AnswerEnumYES_NO_NOOPINION answer
			static Stream<PollSummaryYES_NO> generateSummary(Stream<List<Answer>>);
			
		
			

	























